"use strict";class Alias{alt;conversion;static#t=new Map;static get(t){return this.#t.get(t)}constructor(t,e,s=null){this.alt=e,this.conversion=s,Alias.#t.set(t,this)}}new Alias("aircraft/0/name","aircraft"),new Alias("simulator/throttle","throttle",-.1),new Alias("aircraft/0/systems/landing_gear/lever_state","gear"),new Alias("aircraft/0/systems/spoilers/state","spoilers"),new Alias("aircraft/0/systems/axes/elevator_trim","trim"),new Alias("aircraft/0/systems/flaps/state","flaps"),new Alias("aircraft/0/systems/parking_brake/state","parkingbrake"),new Alias("aircraft/0/indicated_airspeed","airspeed",1.94384),new Alias("aircraft/0/groundspeed","groundspeed",1.94384),new Alias("aircraft/0/altitude_msl","altitude"),new Alias("aircraft/0/altitude_agl","altitudeAGL"),new Alias("aircraft/0/heading_magnetic","heading",180/Math.PI),new Alias("aircraft/0/vertical_speed","verticalspeed",196.8504),new Alias("aircraft/0/systems/autopilot/vnav/on","vnavon"),new Alias("aircraft/0/flightplan/full_info","fplinfo"),new Alias("aircraft/0/systems/autopilot/on","autopilot"),new Alias("aircraft/0/systems/autopilot/alt/on","alton"),new Alias("aircraft/0/systems/autopilot/vs/on","vson"),new Alias("aircraft/0/systems/autopilot/spd/on","spdon"),new Alias("aircraft/0/systems/autopilot/hdg/on","hdgon"),new Alias("aircraft/0/systems/autopilot/nav/on","navon"),new Alias("aircraft/0/systems/autopilot/alt/target","alt",3.28084),new Alias("aircraft/0/systems/autopilot/vs/target","vs",3.28084),new Alias("aircraft/0/systems/autopilot/spd/target","spd",1.94384),new Alias("aircraft/0/systems/autopilot/hdg/target","hdg",180/Math.PI),new Alias("aircraft/0/systems/axes/pitch","pitch"),new Alias("aircraft/0/systems/axes/roll","roll"),new Alias("aircraft/0/systems/axes/yaw","yaw"),new Alias("aircraft/0/latitude","latitude"),new Alias("aircraft/0/longitude","longitude"),new Alias("aircraft/0/magnetic_variation","variation",180/Math.PI),new Alias("environment/wind_velocity","wind",1.94384),new Alias("environment/wind_direction_true","winddir",180/Math.PI),new Alias("aircraft/0/flightplan/route","route"),new Alias("aircraft/0/flightplan/coordinates","coordinates"),new Alias("aircraft/0/configuration/flaps/stops","flapcount"),new Alias("aircraft/0/systems/engines/0/n1","n1",100),new Alias("aircraft/0/is_on_ground","onground"),new Alias("aircraft/0/is_on_runway","onrunway"),new Alias("aircraft/0/systems/auto_brakes/command_state","autobrakes"),new Alias("aircraft/0/systems/brakes/left/percentage","leftbrake"),new Alias("aircraft/0/systems/brakes/right/percentage","rightbrake"),new Alias("aircraft/0/systems/electrical_switch/master_switch/state","master"),new Alias("aircraft/0/systems/electrical_switch/nav_lights_switch/state","navlights"),new Alias("aircraft/0/systems/electrical_switch/strobe_lights_switch/state","strobelights"),new Alias("aircraft/0/systems/electrical_switch/landing_lights_switch/state","landinglights"),new Alias("aircraft/0/systems/electrical_switch/beacon_lights_switch/state","beaconlights");class Item{id;type;name;alias=null;conversion=null;value=null;#e=[];constructor(t,e,s){this.id=t,this.type=e,this.name=s;const i=Alias.get(this.name);void 0!==i&&(this.alias=i.alt,this.conversion=i.conversion)}get buffer(){let t,e=this.value;if(null===e)return Buffer.from([0]);switch(null!==this.conversion&&(e/=this.conversion),this.type){case 0:e=Number(e),t=Buffer.from([e]);case 1:t=Buffer.allocUnsafe(4),t.writeInt32LE(e);break;case 2:t=Buffer.allocUnsafe(4),t.writeFloatLE(e);break;case 3:t=Buffer.allocUnsafe(8),t.writeDoubleLE(e);break;case 4:t=Buffer.allocUnsafe(4+e.length),t.writeInt32LE(e.length),t.write(e,4);break;case 5:t=Buffer.allocUnsafe(8),t.writeBigInt64LE(e);break;default:throw"buffer type is not valid"}return t}set buffer(t){let e;switch(this.type){case 0:e=Boolean(t[0]);break;case 1:e=t.readInt32LE();break;case 2:e=t.readFloatLE();break;case 3:e=t.readDoubleLE();break;case 4:e=t.toString("utf8",4);break;case 5:e=t.readBigInt64LE();break;default:throw"buffer type is not valid"}null!==this.conversion&&(e*=this.conversion),this.value=e}addCallback(t=(()=>{})){this.#e.push(t);return this.#e.length}callback(){this.#e.forEach((t=>{t()})),this.#e=[]}}const Net=require("net"),UDP=require("dgram");class Client{#s;#i="";#a=new Net.Socket;#r=null;#n=null;#l=!1;#o=[];#c=new Map;constructor(t){this.#s=t,this.#d(),this.#a.on("data",(t=>{console.log(this.#i+" Rx\t\t\t",t);for(let e of t)this.#o.push(e);this.#h()})),this.#a.on("error",(t=>{"ECONNREFUSED"===t.code&&this.log(this.#i+" TCP Connection Refused")})),this.log("TCP Socket Created")}get#f(){return null!==this.#r}#d(){this.#c=new Map,this.addItem(new Item(-1,4,"manifest"))}#u(){this.#f&&(clearTimeout(this.#n),this.#n=null,this.#r.close(),this.#r=null)}#g(){this.#f?this.log("Already Searching for UDP Packets"):(this.log("Searching for UDP Packets..."),this.#r=UDP.createSocket("udp4"),this.#r.on("message",((t,e)=>{let s=e.address;this.log(s+" UDP Packet Found"),this.#u(),this.connect(s)})),this.#r.bind(15e3),this.#n=setTimeout((()=>{this.#u(),this.log("UDP Search Timed out")}),1e4))}#h(){if(this.#o.length<9)return;const t=Buffer.from(this.#o.slice(4,8)).readInt32LE()+8;if(this.#o.length<t)return;const e=Buffer.from(this.#o.slice(0,4)).readInt32LE(),s=Buffer.from(this.#o.slice(8,t));this.#o.splice(0,t),this.#w(e,s),this.#o.length>0&&this.#h()}#w(t,e){if(-1===t){this.#d();return e.toString().split("\n").forEach((t=>{const e=t.split(","),s=parseInt(e[0]),i=parseInt(e[1]),a=e[2],r=new Item(s,i,a);this.addItem(r)})),this.log(this.#i+"\nManifest Built, API Ready"),void this.#s.emit("ready",this.#i)}const s=this.getItem(t.toString());void 0!==s&&(s.buffer=e,s.callback())}#m(t,e){let s=Buffer.allocUnsafe(5);return s.writeInt32LE(t),s[4]=e,s}log(t){this.#s.emit("log",t),console.log(t)}connect(t=""){if(this.#l)return this.log(this.#i+" TCP Already Active"),void this.#s.emit("ready",this.#i);this.#i=t,""!==this.#i?(this.log(this.#i+" Attempting TCP Connection"),this.#a.connect({host:this.#i,port:10112},(()=>{this.#l=!0,this.log(this.#i+" TCP Established, Requesting Manifest"),this.readState("manifest")}))):this.#g()}close(){this.#f&&this.#u(),this.#l?(this.#l=!1,this.#a.end((()=>{this.log(this.#i+" TCP Closed"),this.#i=""}))):this.log("TCP Closed")}readState(t,e=(()=>{})){const s=this.getItem(t);if(void 0===s||-1===s.type)return void e();if(s.addCallback(e)>1)return;const i=this.#m(s.id,0);this.#a.write(i),console.log(this.#i+" Tx "+t+" ("+s.id+")\t",i)}writeState(t){const e=this.getItem(t);if(void 0===e)return;let s=this.#m(e.id,1);s=Buffer.concat([s,e.buffer]),this.#a.write(s),console.log(this.#i+" Tx "+t+" ("+e.id+")\t",s)}addItem(t){this.#c.set(t.id.toString(),t),this.#c.set(t.name,t),null!==t.alias&&this.#c.set(t.alias,t)}getItem(t){const e=this.#c.get(t);return void 0===e&&this.log(this.#i+" Invalid Item "+t),e}}class Controller{static clients=new Map;static bridge(t,e){let s=this.clients.get(t.id);void 0===s&&(s=new Client(t),this.clients.set(t.id,s)),s.connect(e)}static close(t){const e=this.clients.get(t.id);return void 0!==e&&(e.close(),!0)}static remove(t){const e=this.close(t);return e&&this.clients.delete(t.id),e}static read(t,e,s=(t=>{})){const i=this.clients.get(t.id),a=i?.getItem(e);void 0!==a&&void 0!==i?i.readState(e,(()=>{let t=a.value;s(t)})):s(void 0)}static write(t,e,s){const i=this.clients.get(t.id),a=i?.getItem(e);void 0!==a&&void 0!==i&&(a.value=s,i.writeState(e))}static log(t,e){const s=this.clients.get(t.id);void 0!==s&&s.log(e)}}const Express=require("express"),app=new Express,server=app.listen(8080),io=require("socket.io")(server);app.use(Express.static(__dirname+"/public")),io.on("connection",(t=>{t.on("disconnect",(()=>{console.log("Client Disconnected"),Controller.remove(t)})),t.on("bridge",(e=>{Controller.log(t,"Connection Requested"),Controller.bridge(t,e)})),t.on("break",(()=>{Controller.log(t,"Closure Requested"),Controller.close(t)})),t.on("read",((e,s)=>{Controller.read(t,e,s)})),t.on("write",((e,s)=>{Controller.write(t,e,s)})),console.log("New Client Connected"),t.emit("connected","Connected to Server")})),console.log("\nLoading Complete, Server Ready"),console.log("\nOpen Browser to localhost:8080\n");