"use strict";const Express=require("express"),app=new Express,server=app.listen(8080),io=require("socket.io")(server),Net=require("net"),UDP=require("dgram");app.use(Express.static(__dirname+"/public")),io.on("connection",(t=>{t.on("test",(t=>{t("Connected to Server"),console.log("New Client Connected")})),t.on("bridge",((e,s)=>{const i=e+" Connection Requested";s(i),console.log(i),Controller.bridge(t,e)})),t.on("break",(e=>{const s="Closure Requested";e(s),console.log(s),Controller.close(t)})),t.on("read",((e,s)=>{Controller.read(t,e,s)})),t.on("write",((e,s)=>{Controller.write(t,e,s)}))}));class Client{constructor(t,e=""){this.address=e,this.socket=t,this.device=new Net.Socket,this.scanner=UDP.createSocket("udp4"),this.scanning=!1,this.active=!1,this.dataBuffer=[],this.initManifest(),this.device.on("data",(t=>{console.log(this.address+" Rx\t\t",t);for(let e of t)this.dataBuffer.push(e);this.validate()})),this.device.on("error",(t=>{"ECONNREFUSED"===t.code&&this.log(this.address+" TCP Connection Refused")})),this.log(this.address+" TCP Socket Created")}initManifest(){this.manifest={},this.addItem(new Item(-1,4,"manifest"))}log(t){this.socket.emit("log",t),console.log(t)}findAddress(t=(()=>{})){this.scanning?this.log("Already Searching for UDP Packets"):(this.log("Searching for UDP Packets..."),this.scanner.on("message",((e,s)=>{this.address=s.address,this.log(this.address+" UDP Packet Found"),this.scanner.close(),this.scanning=!1,t()})),this.scanning=!0,this.scanner.bind(15e3))}connect(){if(this.log(this.address+" Attempting TCP Connection"),""!==this.address)return this.active?(this.log(this.address+" TCP Already Active"),void this.socket.emit("ready",this.address)):void this.device.connect({host:this.address,port:10112},(()=>{this.log(this.address+" TCP Established, Requesting Manifest"),this.active=!0,this.readState("manifest")}));this.findAddress((()=>{this.connect()}))}close(){this.scanning&&(this.scanner.close(),this.scanning=!1),this.active&&(this.device.end((()=>{this.log(this.address+" TCP Closed")})),this.active=!1)}validate(){if(this.dataBuffer.length<9)return;const t=Buffer.from(this.dataBuffer.slice(4,8)).readInt32LE()+8;if(this.dataBuffer.length<t)return;const e=Buffer.from(this.dataBuffer.slice(0,4)).readInt32LE(),s=Buffer.from(this.dataBuffer.slice(8,t));this.dataBuffer.splice(0,t),this.processData(e,s),this.dataBuffer.length>0&&this.validate()}processData(t,e){if(-1===t)this.initManifest(),(e=e.toString().split("\n")).forEach((t=>{t=t.split(",");let e=new Item(t[0],t[1],t[2]);this.addItem(e)})),this.log(this.address+" Manifest Built, API Ready"),this.socket.emit("ready",this.address);else{const s=this.getItem(t);s.buffer=e,s.callback()}}initalBuffer(t,e){let s=Buffer.allocUnsafe(5);return s.writeInt32LE(t),s[4]=e,s}readState(t,e=(()=>{})){const s=this.getItem(t);if(-1===s.type)e();else if(s.callbacks.push(e),s.callbacks.length>1)return;const i=this.initalBuffer(s.id,0);this.device.write(i),console.log(this.address+" Tx "+s.id+"\t",i)}writeState(t){const e=this.getItem(t);let s=this.initalBuffer(e.id,1);s=Buffer.concat([s,e.buffer]),this.device.write(s),console.log(this.address+" Tx "+e.id+"\t",s)}addItem(t){this.manifest[t.id]=t,this.manifest[t.name]=t,void 0!==t.alias&&(this.manifest[t.alias]=t)}getItem(t){return this.manifest[t]}}class Item{static aliases={"aircraft/0/name":"aircraft","simulator/throttle":"throttle","aircraft/0/systems/landing_gear/lever_state":"gear","aircraft/0/systems/spoilers/state":"spoilers","aircraft/0/systems/axes/elevator_trim":"trim","aircraft/0/systems/flaps/state":"flaps","aircraft/0/systems/parking_brake/state":"parkingbrake","aircraft/0/indicated_airspeed":"airspeed","aircraft/0/groundspeed":"groundspeed","aircraft/0/altitude_msl":"altitude","aircraft/0/altitude_agl":"altitudeAGL","aircraft/0/heading_magnetic":"heading","aircraft/0/vertical_speed":"verticalspeed","aircraft/0/systems/autopilot/vnav/on":"vnav","aircraft/0/flightplan/full_info":"fplinfo","aircraft/0/systems/autopilot/on":"autopilot","aircraft/0/systems/autopilot/alt/on":"alton","aircraft/0/systems/autopilot/vs/on":"vson","aircraft/0/systems/autopilot/spd/on":"spdon","aircraft/0/systems/autopilot/hdg/on":"hdgon","aircraft/0/systems/autopilot/nav/on":"navon","aircraft/0/systems/autopilot/alt/target":"alt","aircraft/0/systems/autopilot/vs/target":"vs","aircraft/0/systems/autopilot/spd/target":"spd","aircraft/0/systems/autopilot/hdg/target":"hdg","aircraft/0/systems/axes/pitch":"pitch","aircraft/0/systems/axes/roll":"roll","aircraft/0/systems/axes/yaw":"yaw","aircraft/0/latitude":"latitude","aircraft/0/longitude":"longitude","aircraft/0/magnetic_variation":"variation","environment/wind_velocity":"wind","environment/wind_direction_true":"winddir","aircraft/0/flightplan/route":"route","aircraft/0/flightplan/coordinates":"coordinates","aircraft/0/configuration/flaps/stops":"flapcount","aircraft/0/systems/engines/0/n1":"n1","aircraft/0/is_on_ground":"onground","aircraft/0/is_on_runway":"onrunway","aircraft/0/systems/auto_brakes/command_state":"autobrakes","aircraft/0/systems/brakes/left/percentage":"leftbrake","aircraft/0/systems/brakes/right/percentage":"rightbrake","aircraft/0/systems/electrical_switch/master_switch/state":"master","aircraft/0/systems/electrical_switch/nav_lights_switch/state":"navlights","aircraft/0/systems/electrical_switch/strobe_lights_switch/state":"strobelights","aircraft/0/systems/electrical_switch/landing_lights_switch/state":"landinglights","aircraft/0/systems/electrical_switch/beacon_lights_switch/state":"beaconlights"};static conversions={airspeed:1.94384,groundspeed:1.94384,heading:180/Math.PI,verticalspeed:196.8504,throttle:-.1,n1:100,wind:1.94384,winddir:180/Math.PI,variation:180/Math.PI,spd:1.94384,hdg:180/Math.PI,alt:3.28084,vs:3.28084};static readBufferType=[t=>Boolean(t[0]),t=>t.readInt32LE(),t=>t.readFloatLE(),t=>t.readDoubleLE(),t=>t.toString("utf8",4),t=>t.readBigInt64LE()];static writeBufferType=[t=>Buffer.from([t]),t=>{let e=Buffer.allocUnsafe(4);return e.writeInt32LE(t),e},t=>{let e=Buffer.allocUnsafe(4);return e.writeFloatLE(t),e},t=>{let e=Buffer.allocUnsafe(8);return e.writeDoubleLE(t),e},t=>{let e=Buffer.allocUnsafe(4+t.length);return e.writeInt32LE(t.length),e.write(t,4),e},t=>{let e=Buffer.allocUnsafe(8);return e.writeBigInt64LE(t),e}];constructor(t,e,s){this.id=parseInt(t),this.type=parseInt(e),this.name=s,this.alias=Item.aliases[this.name],this.value=void 0,this.conversion=Item.conversions[this.alias],this.callbacks=[]}get buffer(){let t=this.value;return void 0!==this.conversion&&(t/=this.conversion),Item.writeBufferType[this.type](t)}set buffer(t){this.value=Item.readBufferType[this.type](t),void 0!==this.conversion&&(this.value*=this.conversion)}callback(){this.callbacks.forEach((t=>{t()})),this.callbacks=[]}}class Controller{static clients={};static bridge(t,e){void 0===this.clients[t.id]&&(this.clients[t.id]=new Client(t,e)),this.clients[t.id].connect()}static close(t){return void 0!==this.clients[t.id]&&(this.clients[t.id].close(),delete this.clients[t.id],!0)}static read(t,e,s){const i=this.clients[t.id];void 0!==i?.getItem(e)?i.readState(e,(()=>{const t=i.getItem(e).value;s(t)})):s(void 0)}static write(t,e,s){const i=this.clients[t.id];void 0!==i?.getItem(e)&&(i.getItem(e).value=s,i.writeState(e))}}console.log("Loading Complete, Server Ready"),console.log("\nOpen Browser to localhost:8080");