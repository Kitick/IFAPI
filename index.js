"use strict";class Item{id;type;name;static#t=new Map;static addAlias(t,e,a=null){this.#t.set(t,{alt:e,conversion:a})}#e=null;#a=null;#s=null;#i=[];constructor(t,e,a){this.id=t,this.type=e,this.name=a;const s=Item.#t.get(this.name);void 0!==s&&(this.#e=s.alt,this.#a=s.conversion)}get alias(){return this.#e}get conversion(){return this.#a}get value(){return this.#s}set value(t){"number"==typeof t&&isNaN(t)&&(t=null),this.#s=t}get buffer(){let t,e=this.value;if(null===e)throw this.name+" value is invalid";switch(null!==this.conversion&&(e/=this.conversion),this.type){case 0:t=Buffer.allocUnsafe(1),t.writeInt8(Number(e));break;case 1:t=Buffer.allocUnsafe(4),t.writeInt32LE(e);break;case 2:t=Buffer.allocUnsafe(4),t.writeFloatLE(e);break;case 3:t=Buffer.allocUnsafe(8),t.writeDoubleLE(e);break;case 4:t=Buffer.allocUnsafe(4+e.length),t.writeInt32LE(e.length),t.write(e,4);break;case 5:t=Buffer.allocUnsafe(8),t.writeBigInt64LE(e);break;default:throw"buffer type is invalid"}return t}set buffer(t){let e;switch(this.type){case 0:e=Boolean(t.readInt8());break;case 1:e=t.readInt32LE();break;case 2:e=t.readFloatLE();break;case 3:e=t.readDoubleLE();break;case 4:e=t.toString("utf8",4);break;case 5:e=t.readBigInt64LE();break;default:throw"buffer type is not valid"}null!==this.conversion&&(e*=this.conversion),this.value=e}addCallback(t=(()=>{})){this.#i.push(t);return this.#i.length}callback(){this.#i.forEach((t=>{t()})),this.#i=[]}}Item.addAlias("aircraft/0/name","aircraft"),Item.addAlias("simulator/throttle","throttle",-.1),Item.addAlias("aircraft/0/systems/landing_gear/lever_state","gear"),Item.addAlias("aircraft/0/systems/spoilers/state","spoilers"),Item.addAlias("aircraft/0/systems/axes/elevator_trim","trim"),Item.addAlias("aircraft/0/systems/flaps/state","flaps"),Item.addAlias("aircraft/0/systems/parking_brake/state","parkingbrake"),Item.addAlias("aircraft/0/indicated_airspeed","airspeed",1.94384),Item.addAlias("aircraft/0/groundspeed","groundspeed",1.94384),Item.addAlias("aircraft/0/altitude_msl","altitude"),Item.addAlias("aircraft/0/altitude_agl","altitudeAGL"),Item.addAlias("aircraft/0/heading_magnetic","heading",180/Math.PI),Item.addAlias("aircraft/0/vertical_speed","verticalspeed",196.8504),Item.addAlias("aircraft/0/systems/autopilot/vnav/on","vnavon"),Item.addAlias("aircraft/0/flightplan/full_info","fplinfo"),Item.addAlias("aircraft/0/systems/autopilot/on","autopilot"),Item.addAlias("aircraft/0/systems/autopilot/alt/on","alton"),Item.addAlias("aircraft/0/systems/autopilot/vs/on","vson"),Item.addAlias("aircraft/0/systems/autopilot/spd/on","spdon"),Item.addAlias("aircraft/0/systems/autopilot/hdg/on","hdgon"),Item.addAlias("aircraft/0/systems/autopilot/nav/on","navon"),Item.addAlias("aircraft/0/systems/autopilot/alt/target","alt",3.28084),Item.addAlias("aircraft/0/systems/autopilot/vs/target","vs",3.28084),Item.addAlias("aircraft/0/systems/autopilot/spd/target","spd",1.94384),Item.addAlias("aircraft/0/systems/autopilot/hdg/target","hdg",180/Math.PI),Item.addAlias("aircraft/0/systems/axes/pitch","pitch"),Item.addAlias("aircraft/0/systems/axes/roll","roll"),Item.addAlias("aircraft/0/systems/axes/yaw","yaw"),Item.addAlias("aircraft/0/latitude","latitude"),Item.addAlias("aircraft/0/longitude","longitude"),Item.addAlias("aircraft/0/magnetic_variation","variation",180/Math.PI),Item.addAlias("environment/wind_velocity","wind",1.94384),Item.addAlias("environment/wind_direction_true","winddir",180/Math.PI),Item.addAlias("aircraft/0/flightplan/route","route"),Item.addAlias("aircraft/0/flightplan/coordinates","coordinates"),Item.addAlias("aircraft/0/configuration/flaps/stops","flapcount"),Item.addAlias("aircraft/0/systems/engines/0/n1","n1",100),Item.addAlias("aircraft/0/is_on_ground","onground"),Item.addAlias("aircraft/0/is_on_runway","onrunway"),Item.addAlias("aircraft/0/systems/auto_brakes/command_state","autobrakes"),Item.addAlias("aircraft/0/systems/brakes/left/percentage","leftbrake"),Item.addAlias("aircraft/0/systems/brakes/right/percentage","rightbrake"),Item.addAlias("aircraft/0/systems/electrical_switch/master_switch/state","master"),Item.addAlias("aircraft/0/systems/electrical_switch/nav_lights_switch/state","navlights"),Item.addAlias("aircraft/0/systems/electrical_switch/strobe_lights_switch/state","strobelights"),Item.addAlias("aircraft/0/systems/electrical_switch/landing_lights_switch/state","landinglights"),Item.addAlias("aircraft/0/systems/electrical_switch/beacon_lights_switch/state","beaconlights");const Net=require("net"),UDP=require("dgram");class Client{#r;#n="";#l=new Net.Socket;#d=null;#o=null;#c=!1;#h=Buffer.alloc(0);#f=new Map;constructor(t){this.#r=t,this.#u(),this.#l.on("data",(t=>{console.log(this.#n+" Rx\t\t\t",t),this.#h=Buffer.concat([this.#h,t]),this.#m()})),this.#l.on("error",(t=>{"ECONNREFUSED"===t.code&&this.log(this.#n+" TCP Connection Refused")})),this.log("TCP Socket Created")}get#g(){return null!==this.#d}#u(){this.#f=new Map,this.addItem(new Item(-1,4,"manifest"))}#v(){this.#g&&(clearTimeout(this.#o),this.#o=null,this.#d.close(),this.#d=null)}#I(){this.#g?this.log("Already searching for packets"):(this.log("Searching for UDP packets..."),this.#d=UDP.createSocket("udp4"),this.#d.on("message",((t,e)=>{let a=e.address;this.log(a+" UDP Packet Found"),this.#v(),this.connect(a)})),this.#d.bind(15e3),this.#o=setTimeout((()=>{this.#v(),this.log("UDP search timed out\n\nTry using an IP address")}),1e4))}#m(){if(this.#h.length<9)return;const t=this.#h.readInt32LE(4)+8;if(this.#h.length<t)return;const e=this.#h.readInt32LE(0),a=this.#h.subarray(8,t);this.#h=this.#h.subarray(t),this.#p(e,a),this.#h.length>0&&this.#m()}#p(t,e){if(-1===t){this.#u();return e.toString().split("\n").forEach((t=>{const e=t.split(","),a=parseInt(e[0]),s=parseInt(e[1]),i=e[2],r=new Item(a,s,i);this.addItem(r)})),this.log(this.#n+"\nManifest Built, API Ready"),void this.#r.emit("ready",this.#n)}const a=this.getItem(t.toString());void 0!==a&&(a.buffer=e,a.callback())}#A(t,e){let a=Buffer.allocUnsafe(5);return a.writeInt32LE(t),a[4]=e,a}#b(t,e,a,s=!1){const i=s?" =":"",r=s?e.value:"";console.log(this.#n,"Tx",t,"("+e.id.toString()+")"+i,r,a)}log(t){this.#r.emit("log",t),console.log(t)}connect(t=""){if(this.#c)return this.log(this.#n+" TCP is already active"),void this.#r.emit("ready",this.#n);this.#n=t,""!==this.#n?(this.log(this.#n+" Attempting TCP Connection"),this.#l.connect({host:this.#n,port:10112},(()=>{this.#c=!0,this.log(this.#n+" TCP Established, Requesting Manifest"),this.readState("manifest")}))):this.#I()}close(){this.#g&&this.#v(),this.#c?(this.#c=!1,this.#l.end((()=>{this.log(this.#n+" TCP Closed"),this.#n=""}))):this.log("TCP Closed")}readState(t,e=(()=>{})){const a=this.getItem(t);if(void 0===a)return void e();if(-1===a.type)e();else{if(a.addCallback(e)>1)return}const s=this.#A(a.id,0);this.#l.write(s),this.#b(t,a,s)}writeState(t){const e=this.getItem(t);if(void 0===e)return;let a=this.#A(e.id,1);a=Buffer.concat([a,e.buffer]),this.#l.write(a),this.#b(t,e,a,!0)}addItem(t){this.#f.set(t.id.toString(),t),this.#f.set(t.name,t),null!==t.alias&&this.#f.set(t.alias,t)}getItem(t){const e=this.#f.get(t);return void 0===e&&this.log(this.#n+" Invalid Item "+t),e}}class ClientManager{#w=new Map;constructor(){}bridge(t,e){let a=this.#w.get(t.id);void 0===a&&(a=new Client(t),this.#w.set(t.id,a)),a.connect(e)}close(t){const e=this.#w.get(t.id);return void 0!==e&&(e.close(),!0)}remove(t){const e=this.close(t);return e&&this.#w.delete(t.id),e}read(t,e,a=(t=>{})){const s=this.#w.get(t.id),i=s?.getItem(e);void 0!==i&&void 0!==s?s.readState(e,(()=>{let t=i.value;a(t)})):a(void 0)}write(t,e,a){const s=this.#w.get(t.id),i=s?.getItem(e);void 0!==i&&void 0!==s&&(i.value=a,s.writeState(e))}log(t,e){const a=this.#w.get(t.id);void 0!==a&&a.log(e)}}const Express=require("express"),app=new Express,server=app.listen(8080),io=require("socket.io")(server);app.use(Express.static(__dirname+"/public")),io.on("connection",(t=>{t.on("disconnect",(()=>{console.log("Client Disconnected"),manager.remove(t)})),t.on("bridge",(e=>{manager.log(t,"Connection Requested"),manager.bridge(t,e)})),t.on("break",(()=>{manager.log(t,"Closure Requested"),manager.close(t)})),t.on("read",((e,a)=>{manager.read(t,e,a)})),t.on("write",((e,a)=>{manager.write(t,e,a)})),console.log("New Client Connected")}));const manager=new ClientManager;console.log("\nLoading Complete, Server Ready"),console.log("\nOpen Browser to localhost:8080\n");