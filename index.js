"use strict";class Item{id;type;name;static#t=new Map;static addAlias(t,a,e=null){this.#t.set(t,{alt:a,conversion:e})}#a=null;#e=null;#s=null;#i=[];constructor(t,a,e){this.id=t,this.type=a,this.name=e;const s=Item.#t.get(this.name);void 0!==s&&(this.#a=s.alt,this.#e=s.conversion)}get alias(){return this.#a}get conversion(){return this.#e}get value(){return this.#s}set value(t){"number"==typeof t&&isNaN(t)&&(t=null),this.#s=t}get buffer(){let t,a=this.value;if(null===a)throw this.name+" value is invalid";switch(null!==this.conversion&&(a/=this.conversion),this.type){case 0:t=Buffer.allocUnsafe(1),t.writeInt8(Number(a));break;case 1:t=Buffer.allocUnsafe(4),t.writeInt32LE(a);break;case 2:t=Buffer.allocUnsafe(4),t.writeFloatLE(a);break;case 3:t=Buffer.allocUnsafe(8),t.writeDoubleLE(a);break;case 4:t=Buffer.allocUnsafe(4+a.length),t.writeInt32LE(a.length),t.write(a,4);break;case 5:t=Buffer.allocUnsafe(8),t.writeBigInt64LE(a);break;default:throw"buffer type is invalid"}return t}set buffer(t){let a;switch(this.type){case 0:a=Boolean(t.readInt8());break;case 1:a=t.readInt32LE();break;case 2:a=t.readFloatLE();break;case 3:a=t.readDoubleLE();break;case 4:a=t.toString("utf8",4);break;case 5:a=t.readBigInt64LE();break;default:throw"buffer type is not valid"}null!==this.conversion&&(a*=this.conversion),this.value=a}addCallback(t=(()=>{})){this.#i.push(t);return this.#i.length}callback(){this.#i.forEach((t=>{t()})),this.#i=[]}}Item.addAlias("aircraft/0/name","aircraft"),Item.addAlias("simulator/throttle","throttle",-.1),Item.addAlias("aircraft/0/systems/landing_gear/lever_state","gear"),Item.addAlias("aircraft/0/systems/spoilers/state","spoilers"),Item.addAlias("aircraft/0/systems/axes/elevator_trim","trim"),Item.addAlias("aircraft/0/systems/flaps/state","flaps"),Item.addAlias("aircraft/0/systems/parking_brake/state","parkingbrake"),Item.addAlias("aircraft/0/indicated_airspeed","airspeed",1.94384),Item.addAlias("aircraft/0/groundspeed","groundspeed",1.94384),Item.addAlias("aircraft/0/altitude_msl","altitude"),Item.addAlias("aircraft/0/altitude_agl","altitudeAGL"),Item.addAlias("aircraft/0/heading_magnetic","heading",180/Math.PI),Item.addAlias("aircraft/0/vertical_speed","verticalspeed",196.8504),Item.addAlias("aircraft/0/systems/autopilot/vnav/on","vnavon"),Item.addAlias("aircraft/0/flightplan/full_info","fplinfo"),Item.addAlias("aircraft/0/systems/autopilot/on","autopilot"),Item.addAlias("aircraft/0/systems/autopilot/alt/on","alton"),Item.addAlias("aircraft/0/systems/autopilot/vs/on","vson"),Item.addAlias("aircraft/0/systems/autopilot/spd/on","spdon"),Item.addAlias("aircraft/0/systems/autopilot/hdg/on","hdgon"),Item.addAlias("aircraft/0/systems/autopilot/nav/on","navon"),Item.addAlias("aircraft/0/systems/autopilot/alt/target","alt",3.28084),Item.addAlias("aircraft/0/systems/autopilot/vs/target","vs",3.28084),Item.addAlias("aircraft/0/systems/autopilot/spd/target","spd",1.94384),Item.addAlias("aircraft/0/systems/autopilot/hdg/target","hdg",180/Math.PI),Item.addAlias("aircraft/0/systems/axes/pitch","pitch"),Item.addAlias("aircraft/0/systems/axes/roll","roll"),Item.addAlias("aircraft/0/systems/axes/yaw","yaw"),Item.addAlias("aircraft/0/latitude","latitude"),Item.addAlias("aircraft/0/longitude","longitude"),Item.addAlias("aircraft/0/magnetic_variation","variation",180/Math.PI),Item.addAlias("environment/wind_velocity","wind",1.94384),Item.addAlias("environment/wind_direction_true","winddir",180/Math.PI),Item.addAlias("aircraft/0/flightplan/route","route"),Item.addAlias("aircraft/0/flightplan/coordinates","coordinates"),Item.addAlias("aircraft/0/configuration/flaps/stops","flapcount"),Item.addAlias("aircraft/0/systems/engines/0/n1","n1",100),Item.addAlias("aircraft/0/is_on_ground","onground"),Item.addAlias("aircraft/0/is_on_runway","onrunway"),Item.addAlias("aircraft/0/systems/auto_brakes/command_state","autobrakes"),Item.addAlias("aircraft/0/systems/brakes/left/percentage","leftbrake"),Item.addAlias("aircraft/0/systems/brakes/right/percentage","rightbrake"),Item.addAlias("aircraft/0/systems/electrical_switch/master_switch/state","master"),Item.addAlias("aircraft/0/systems/electrical_switch/nav_lights_switch/state","navlights"),Item.addAlias("aircraft/0/systems/electrical_switch/strobe_lights_switch/state","strobelights"),Item.addAlias("aircraft/0/systems/electrical_switch/landing_lights_switch/state","landinglights"),Item.addAlias("aircraft/0/systems/electrical_switch/beacon_lights_switch/state","beaconlights");const Net=require("net"),UDP=require("dgram");class Client{#r;#n="";#l=new Net.Socket;#d=null;#o=null;#c=!1;#h=Buffer.alloc(0);#f=new Map;constructor(t){this.#r=t,this.#u(),this.#l.on("data",(t=>{console.log(this.#n+" Rx\t\t\t",t),this.#h=Buffer.concat([this.#h,t]),this.#m()})),this.#l.on("error",(t=>{"ECONNREFUSED"===t.code&&this.log(this.#n+" TCP Connection Refused")})),this.log("TCP Socket Created")}get#g(){return null!==this.#d}#u(){this.#f=new Map,this.addItem(new Item(-1,4,"manifest"))}#p(){this.#g&&(clearTimeout(this.#o),this.#o=null,this.#d.close(),this.#d=null)}#I(){this.#g?this.log("Already searching for packets"):(this.log("Searching for UDP packets..."),this.#d=UDP.createSocket("udp4"),this.#d.on("message",((t,a)=>{let e=a.address;this.log(e+" UDP Packet Found"),this.#p(),this.connect(e)})),this.#d.bind(15e3),this.#o=setTimeout((()=>{this.#p(),this.log("UDP search timed out\n\nTry using an IP address")}),1e4))}#m(){if(this.#h.length<9)return;const t=this.#h.readInt32LE(4)+8;if(this.#h.length<t)return;const a=this.#h.readInt32LE(0),e=this.#h.subarray(8,t);this.#h=this.#h.subarray(t),this.#v(a,e),this.#h.length>0&&this.#m()}#v(t,a){if(-1===t){this.#u();return a.toString().split("\n").forEach((t=>{const a=t.split(","),e=parseInt(a[0]),s=parseInt(a[1]),i=a[2],r=new Item(e,s,i);this.addItem(r)})),this.log(this.#n+"\nManifest Built, API Ready"),void this.#r.send("ready",this.#n)}const e=this.getItem(t.toString());void 0!==e&&(e.buffer=a,e.callback())}#y(t,a){let e=Buffer.allocUnsafe(5);return e.writeInt32LE(t),e[4]=a,e}#b(t,a,e,s=!1){const i=s?" =":"",r=s?a.value:"";console.log(this.#n,"Tx",t,"("+a.id.toString()+")"+i,r,e)}log(t){this.#r.send("log",t),console.log(t)}connect(t=""){if(this.#c)return this.log(this.#n+" TCP is already active"),void this.#r.send("ready",this.#n);this.#n=t,""!==this.#n?(this.log(this.#n+" Attempting TCP Connection"),this.#l.connect({host:this.#n,port:10112},(()=>{this.#c=!0,this.log(this.#n+" TCP Established, Requesting Manifest"),this.readState("manifest")}))):this.#I()}close(){this.#g&&this.#p(),this.#c?(this.#c=!1,this.#l.end((()=>{this.log(this.#n+" TCP Closed"),this.#n=""}))):this.log("TCP Closed")}readState(t,a=(()=>{})){const e=this.getItem(t);if(void 0===e)return void a();if(-1===e.type)a();else{if(e.addCallback(a)>1)return}const s=this.#y(e.id,0);this.#l.write(s),this.#b(t,e,s)}writeState(t){const a=this.getItem(t);if(void 0===a)return;let e=this.#y(a.id,1);e=Buffer.concat([e,a.buffer]),this.#l.write(e),this.#b(t,a,e,!0)}addItem(t){this.#f.set(t.id.toString(),t),this.#f.set(t.name,t),null!==t.alias&&this.#f.set(t.alias,t)}getItem(t){const a=this.#f.get(t);return void 0===a&&this.log(this.#n+" Invalid Item "+t),a}}const{app:app,BrowserWindow:BrowserWindow,ipcMain:ipcMain}=require("electron");let display,client;app.whenReady().then((()=>{const t=new BrowserWindow({width:1600,height:900,webPreferences:{nodeIntegration:!1,contextIsolation:!0,preload:__dirname+"/preload.js"}});t.loadFile("public/index.html"),display=t.webContents,client=new Client(display),console.log("\nLoading Complete, Server Ready")})),ipcMain.on("bridge",((t,[a])=>{client.log("Connection Requested"),client.connect(a)})),ipcMain.on("break",(t=>{client.log("Closure Requested"),client.close()})),ipcMain.on("read",((t,[a,e])=>{const s=client.getItem(a);void 0!==s?client.readState(a,(()=>{display.send("readback",e,s.value)})):display.send("readback",e,void 0)})),ipcMain.on("write",((t,[a,e])=>{const s=client.getItem(a);void 0!==s&&(s.value=e,client.writeState(a))}));