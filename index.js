"use strict";class a{id;type;name;static#a=new Map;static addAlias(a,t,s=null){this.#a.set(a,{alt:t,conversion:s})}#t=null;#s=null;#e=null;#i=[];constructor(t,s,e){this.id=t,this.type=s,this.name=e;const i=a.#a.get(this.name);void 0!==i&&(this.#t=i.alt,this.#s=i.conversion)}get alias(){return this.#t}get conversion(){return this.#s}get value(){return this.#e}set value(a){"number"==typeof a&&isNaN(a)&&(a=null),this.#e=a}get buffer(){let a,t=this.value;if(null===t)throw this.name+" value is invalid";switch(null!==this.conversion&&(t/=this.conversion),this.type){case 0:a=Buffer.allocUnsafe(1),a.writeInt8(Number(t));break;case 1:a=Buffer.allocUnsafe(4),a.writeInt32LE(t);break;case 2:a=Buffer.allocUnsafe(4),a.writeFloatLE(t);break;case 3:a=Buffer.allocUnsafe(8),a.writeDoubleLE(t);break;case 4:a=Buffer.allocUnsafe(4+t.length),a.writeInt32LE(t.length),a.write(t,4);break;case 5:a=Buffer.allocUnsafe(8),a.writeBigInt64LE(t);break;default:throw"buffer type is invalid"}return a}set buffer(a){let t;switch(this.type){case 0:t=Boolean(a.readInt8());break;case 1:t=a.readInt32LE();break;case 2:t=a.readFloatLE();break;case 3:t=a.readDoubleLE();break;case 4:t=a.toString("utf8",4);break;case 5:t=a.readBigInt64LE();break;default:throw"buffer type is not valid"}null!==this.conversion&&(t*=this.conversion),this.value=t}addCallback(a=(()=>{})){this.#i.push(a);return this.#i.length}callback(){this.#i.forEach((a=>{a()})),this.#i=[]}}a.addAlias("aircraft/0/name","aircraft"),a.addAlias("simulator/throttle","throttle",-.1),a.addAlias("aircraft/0/systems/landing_gear/lever_state","gear"),a.addAlias("aircraft/0/systems/spoilers/state","spoilers"),a.addAlias("aircraft/0/systems/axes/elevator_trim","trim"),a.addAlias("aircraft/0/systems/flaps/state","flaps"),a.addAlias("aircraft/0/systems/parking_brake/state","parkingbrake"),a.addAlias("aircraft/0/indicated_airspeed","airspeed",1.94384),a.addAlias("aircraft/0/groundspeed","groundspeed",1.94384),a.addAlias("aircraft/0/altitude_msl","altitude"),a.addAlias("aircraft/0/altitude_agl","altitudeAGL"),a.addAlias("aircraft/0/heading_magnetic","heading",180/Math.PI),a.addAlias("aircraft/0/vertical_speed","verticalspeed",196.8504),a.addAlias("aircraft/0/systems/autopilot/vnav/on","vnavon"),a.addAlias("aircraft/0/flightplan/full_info","fplinfo"),a.addAlias("aircraft/0/systems/autopilot/on","autopilot"),a.addAlias("aircraft/0/systems/autopilot/alt/on","alton"),a.addAlias("aircraft/0/systems/autopilot/vs/on","vson"),a.addAlias("aircraft/0/systems/autopilot/spd/on","spdon"),a.addAlias("aircraft/0/systems/autopilot/hdg/on","hdgon"),a.addAlias("aircraft/0/systems/autopilot/nav/on","navon"),a.addAlias("aircraft/0/systems/autopilot/approach/on","approach"),a.addAlias("aircraft/0/systems/autopilot/alt/target","alt",3.28084),a.addAlias("aircraft/0/systems/autopilot/vs/target","vs",3.28084),a.addAlias("aircraft/0/systems/autopilot/spd/target","spd",1.94384),a.addAlias("aircraft/0/systems/autopilot/hdg/target","hdg",180/Math.PI),a.addAlias("aircraft/0/systems/axes/pitch","pitch"),a.addAlias("aircraft/0/systems/axes/roll","roll"),a.addAlias("aircraft/0/systems/axes/yaw","yaw"),a.addAlias("aircraft/0/latitude","latitude"),a.addAlias("aircraft/0/longitude","longitude"),a.addAlias("aircraft/0/magnetic_variation","variation",180/Math.PI),a.addAlias("environment/wind_velocity","wind",1.94384),a.addAlias("environment/wind_direction_true","winddir",180/Math.PI),a.addAlias("aircraft/0/flightplan/route","route"),a.addAlias("aircraft/0/flightplan/coordinates","coordinates"),a.addAlias("aircraft/0/configuration/flaps/stops","flapcount"),a.addAlias("aircraft/0/systems/engines/0/n1","n1",100),a.addAlias("aircraft/0/is_on_ground","onground"),a.addAlias("aircraft/0/is_on_runway","onrunway"),a.addAlias("aircraft/0/systems/auto_brakes/command_state","autobrakes"),a.addAlias("aircraft/0/systems/brakes/left/percentage","leftbrake"),a.addAlias("aircraft/0/systems/brakes/right/percentage","rightbrake"),a.addAlias("aircraft/0/systems/electrical_switch/master_switch/state","master"),a.addAlias("aircraft/0/systems/electrical_switch/nav_lights_switch/state","navlights"),a.addAlias("aircraft/0/systems/electrical_switch/strobe_lights_switch/state","strobelights"),a.addAlias("aircraft/0/systems/electrical_switch/landing_lights_switch/state","landinglights"),a.addAlias("aircraft/0/systems/electrical_switch/beacon_lights_switch/state","beaconlights");const t=require("net"),s=require("dgram");class e{#r;#n="";#l=new t.Socket;#d=null;#o=null;#c=!1;#h=Buffer.alloc(0);#f=new Map;constructor(a){this.#r=a,this.#u(),this.#l.on("data",(a=>{console.log(this.#n+" Rx\t\t\t",a),this.#h=Buffer.concat([this.#h,a]),this.#g()})),this.#l.on("error",(a=>{"ECONNREFUSED"===a.code&&this.log(this.#n+" TCP Connection Refused")})),this.log("TCP Socket Created")}get#p(){return null!==this.#d}#u(){this.#f=new Map,this.addItem(new a(-1,4,"manifest"))}#m(){this.#p&&(clearTimeout(this.#o),this.#o=null,this.#d.close(),this.#d=null)}#v(){this.#p?this.log("Already searching for packets"):(this.log("Searching for UDP packets..."),this.#d=s.createSocket("udp4"),this.#d.on("message",((a,t)=>{let s=t.address;this.log(s+" UDP Packet Found"),this.#m(),this.connect(s)})),this.#d.bind(15e3),this.#o=setTimeout((()=>{this.#m(),this.log("UDP search timed out\n\nTry using an IP address")}),1e4))}#g(){if(this.#h.length<9)return;const a=this.#h.readInt32LE(4)+8;if(this.#h.length<a)return;const t=this.#h.readInt32LE(0),s=this.#h.subarray(8,a);this.#h=this.#h.subarray(a),this.#y(t,s),this.#h.length>0&&this.#g()}#y(t,s){if(-1===t){this.#u();return s.toString().split("\n").forEach((t=>{const s=t.split(","),e=parseInt(s[0]),i=parseInt(s[1]),r=s[2],n=new a(e,i,r);this.addItem(n)})),this.log(this.#n+"\nManifest Built, API Ready"),void this.#r.send("ready",this.#n)}const e=this.getItem(t.toString());void 0!==e&&(e.buffer=s,e.callback())}#A(a,t){let s=Buffer.allocUnsafe(5);return s.writeInt32LE(a),s[4]=t,s}#b(a,t,s,e=!1){const i=e?" =":"",r=e?t.value:"";console.log(this.#n,"Tx",a,"("+t.id.toString()+")"+i,r,s)}log(a){this.#r.send("log",a),console.log(a)}connect(a=""){if(this.#c)return this.log(this.#n+" TCP is already active"),void this.#r.send("ready",this.#n);this.#n=a,""!==this.#n?(this.log(this.#n+" Attempting TCP Connection"),this.#l.connect({host:this.#n,port:10112},(()=>{this.#c=!0,this.log(this.#n+" TCP Established, Requesting Manifest"),this.readState("manifest")}))):this.#v()}close(){this.#p&&this.#m(),this.#c?(this.#c=!1,this.#l.end((()=>{this.log(this.#n+" TCP Closed"),this.#n=""}))):this.log("TCP Closed")}readState(a,t=(()=>{})){const s=this.getItem(a);if(void 0===s)return void t();if(-1===s.type)t();else{if(s.addCallback(t)>1)return}const e=this.#A(s.id,0);this.#l.write(e),this.#b(a,s,e)}writeState(a){const t=this.getItem(a);if(void 0===t)return;let s=this.#A(t.id,1);s=Buffer.concat([s,t.buffer]),this.#l.write(s),this.#b(a,t,s,!0)}addItem(a){this.#f.set(a.id.toString(),a),this.#f.set(a.name,a),null!==a.alias&&this.#f.set(a.alias,a)}getItem(a){const t=this.#f.get(a);return void 0===t&&this.log(this.#n+" Invalid Item "+a),t}}const{app:i,BrowserWindow:r,ipcMain:n}=require("electron");let l,d;i.whenReady().then((()=>{const a=new r({width:1600,height:900,webPreferences:{nodeIntegration:!1,contextIsolation:!0,preload:__dirname+"/preload.js"}});a.loadFile("public/index.html"),l=a.webContents,d=new e(l),console.log("\nLoading Complete, Server Ready\n")})),n.on("bridge",((a,[t])=>{d.log("Connection Requested"),d.connect(t)})),n.on("break",(a=>{d.log("Closure Requested"),d.close()})),n.on("read",((a,[t,s])=>{const e=d.getItem(t);void 0!==e?d.readState(t,(()=>{l.send("readback",s,e.value)})):l.send("readback",s,void 0)})),n.on("write",((a,[t,s])=>{const e=d.getItem(t);void 0!==e&&(e.value=s,d.writeState(t))})),n.on("ping",(a=>{const t=performance.now();d.readState("autopilot",(()=>{const a=performance.now()-t;l.send("ping",a)}))}));