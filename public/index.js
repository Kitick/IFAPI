"use strict";class DOMInterface{#t=new Map;constructor(){}#e(t){const e=this.#t.get(t.id);if(void 0===e)return;let a=null;switch(t.type){case"number":a=parseFloat(t.value);break;case"checkbox":a=t.checked;break;case"select-one":a=t.value}"number"==typeof a&&isNaN(a)&&(a=null),e.value=a}#a(t){t.classList.add("error"),setTimeout((()=>{t.classList.remove("error")}),2e3)}add(...t){t.forEach((t=>{if(void 0!==this.#t.get(t))return;const e=document.getElementById(t);if(null===e)return;const a=e;a.addEventListener("change",(()=>{this.#e(a)})),this.#t.set(a.id,{dom:a,value:null}),this.#e(a)}))}read(...t){let e=[];return t.forEach((t=>{const a=this.#t.get(t)?.value;void 0!==a&&e.push(a)})),e}readAll(){let t=new Map;return this.#t.forEach(((e,a)=>{t.set(a,e.value)})),t}write(t,e){const a=this.#t.get(t);if(void 0===a)return;a.value=e;const o=a.dom;"boolean"!=typeof e?(e=e??"",o.value=e.toString()):o.checked=e}validate(t=!1,...e){let a=!0;return e.forEach((e=>{const o=this.#t.get(e);if(void 0===o)return!1;const n=null!==o.value;!n&&t&&this.#a(o.dom),a=n&&a})),a}}class ProfileStorage{static defaultName="#default";#o;constructor(t){this.#o=t;const e=ProfileStorage.defaultName;null===localStorage.getItem(e)&&this.save(e),this.#n(),this.load(e)}#n(){let t=[];for(let e=0,a=localStorage.length;e<a;e++)t.push(localStorage.key(e));t.sort(),this.#o.innerHTML="",t.forEach((t=>{let e=new Option(t,t);this.#o.appendChild(e)}))}#i(t,e){const a=document.getElementById(t);null!==a&&(a.classList.remove("off"),a.classList.add(e),setTimeout((()=>{a.classList.remove(e),a.classList.add("off")}),500))}add(t){const e=document.getElementById("profile-name");void 0===t&&(t=e.value),e.value="",this.save(t),this.#n(),this.#o.value=t}save(t=this.#o.value){if(""===t)return void this.add();const e=domInterface.readAll();let a={};e.forEach(((t,e)=>{a[e]=t})),localStorage.setItem(t,JSON.stringify(a)),this.#i("profile-save","active")}load(t=this.#o.value){const e=localStorage.getItem(t);if(""===t||null===e)return void this.#i("profile-load","error");this.#o.value=t;const a=document.getElementById("loadempty").checked,o=JSON.parse(e);for(let t in o){let e=o[t];if(null!==e){let t=parseFloat(e.toString());isNaN(t)||(e=t)}else if(!a)continue;domInterface.write(t,e)}this.#i("profile-load","active")}remove(t=this.#o.value){if(""===t)return;confirm("Are you sure you want to delete: "+t)&&(localStorage.removeItem(t),this.#n())}}class PID{kp;ki;kd;minValue;maxValue;maxDelta;options;#s=0;#r=0;#l=0;#c;#u;constructor(t=0,e=0,a=0,o=-1/0,n=1/0,i=1/0,s={}){this.kp=t,this.ki=e,this.kd=a,this.minValue=o,this.maxValue=n,this.maxDelta=i,this.options=s,this.#c=s.cyclical??!1,this.#u=s.inverted??!1}#d(t){const e=this.maxValue-this.minValue;return((t-this.minValue)%e+e)%e+this.minValue}#f(t,e=-1/0,a=1/0){return t=Math.max(t,e),t=Math.min(t,a)}#h(t){const e=this.maxValue-this.minValue,a=Math.sign(t),o=this.#d(t);return o>e/2?(e-o)*-a:t}#g(t,e){let a=e-t;return this.#c&&(t=this.#d(t),a=(e=this.#d(e))-t,a=this.#h(a)),a}update(t,e){const a=this.#g(t,e);let o=this.kp*(a-this.#s)+this.ki*a+this.kd*(a+-2*this.#s+this.#r);return o=this.#f(o,-this.maxDelta,this.maxDelta),this.#u&&(o*=-1),this.#s=a,this.#r=this.#s,this.#l+=o,this.#l=this.#f(this.#l,this.minValue,this.maxValue),this.#l}}class PIDController{input;output;target;#m;#p=null;constructor(t,e,a,o=0){this.input=e,this.output=a,this.target=o,this.#m=t}async start(t){this.stop();const e=await this.input(),a=this.#m.update(e,this.target);this.output(a),this.#p=setTimeout((()=>{this.start(t)}),t)}stop(){clearInterval(this.#p??void 0),this.#p=null}}let flcPID=new PID(100,1,5,-3e3,5e3,void 0,{inverted:!0}),flcController=new PIDController(flcPID,(async()=>(await readAsync("airspeed"))[0]),(t=>{write("vs",t)}),200),throttlePID=new PID(10,.1,1,-100,100,2),n1PID=new PID(5,.1,1,20,90),n1Controller=new PIDController(throttlePID,(async()=>(await readAsync("n1"))[0]),(t=>{write("throttle",t)}),50),speedController=new PIDController(n1PID,(async()=>(await readAsync("airspeed"))[0]),(t=>{n1Controller.target=t}),200);class AutoFunction{delay;#v;#w;#y;#A=null;#I=[];#M=[];#k=[];#b=!1;#D=!1;#L;memory={};stage=0;constructor(t,e,a,o,n,i){this.delay=e;const s=document.getElementById(t);if(this.#w=document.getElementById(t+"-status"),this.status="Idle",null===s)throw"Element "+t+" is undefined";this.#v=s,this.#v.addEventListener("click",(()=>{dependencyCheck(t),this.setActive()})),this.#E(),this.#I=a,this.#M=o,this.#k=n,this.#L=i,this.#M.forEach((t=>{let e=document.getElementById(t);if(null===e||"INPUT"!==e.tagName||"number"!==e.type)return;const a=e,o=document.getElementById("tooltip");a.addEventListener("mouseenter",(()=>{o.innerText=a.placeholder})),a.addEventListener("mouseout",(()=>{o.innerText="Tooltip"}))})),domInterface.add(...o)}set status(t){if(this.#y=t,null===this.#w)return;const e="STATUS:\n\n"+t;this.#w.innerText!==e&&(this.#w.innerText=e)}get status(){return this.#y}isActive(){return this.#b}setActive(t=!this.#b){if(this.#b!==t){if(this.#b=t,this.#E(),this.#b)return this.stage=0,void this.#T();clearTimeout(this.#A??void 0),this.#A=null}}#E(t){const e=this.#v.classList;void 0===t&&(t=this.isActive()?"active":"off"),e.contains(t)||(["off","active","armed","error"].forEach((t=>{e.remove(t)})),e.add(t))}async#T(){if(!this.validateInputs(!0))return void this.error("Missing Inputs");const t=this.#D;this.#D=!1;const e=await readAsync(...this.#I),a=domInterface.read(...this.#M);this.#L(e,a),!this.#D&&t&&this.#E(),-1!==this.delay?this.#b&&(this.#A=setTimeout((()=>{this.#A=null,this.#T()}),this.delay)):this.setActive(!1)}validateInputs(t=!1){let e=domInterface.validate(t,...this.#M);return this.#k.forEach((t=>{e=t.validateInputs()&&e})),e}arm(){this.#D=!0,this.#E("armed")}error(t){void 0!==t&&(this.status=t),this.setActive(!1),this.#E("error"),setTimeout((()=>{this.#E()}),2e3)}}const NMtoFT=6076.12;function dms(t,e=0,a=0){return Math.sign(t)*(Math.abs(t)+e/60+a/3600)}function calcLLfromHD(t,e,a,o=0){e=90-e-o,e*=toRad;const n=(a/=60)*Math.sin(e)+t.lat;return{lat:n,long:a*Math.cos(e)/Math.cos(toRad*(t.lat+n)*.5)+t.long}}function calcLLdistance(t,e){const a=60*(e.lat-t.lat);return((60*(e.long-t.long)*Math.cos(.5*(t.lat+e.lat)*toRad))**2+a**2)**.5}function controlThrottle(t,e,a){write("spdon",!1),write("throttle",t>0?-80:-100),write("spd",e),write("spoilers",1),a&&(write("spdon",!0),write("spoilers",2))}function showfpl(t,e,a){const o=document.createElement("input"),n=document.createElement("br");o.type="number",o.id=t,a.innerHTML+=" "+e,a.appendChild(o),a.appendChild(n)}function nextRestriction(t,e,a,o){return t.identifier!==e.name&&t.name!==e.name||(e.index=a,e.children=o,e.altitude=t.altitude),a>=e.index&&-1!==t.altitude&&(e.altitudeRestriction.push(t.altitude),e.restrictionLocation={lat:t.location.Latitude,long:t.location.Longitude}),e}function speak(t){t=t.toString();const e=document.getElementById("voices").selectedIndex,a=speechSynthesis.getVoices(),o=document.getElementById("utterancerate");let n=parseInt(o.value);isNaN(n)&&(n=1);const i=new SpeechSynthesisUtterance(t);i.rate=n,i.voice=a[e],speechSynthesis.speak(i)}speechSynthesis.getVoices();const toDeg=180/Math.PI,toRad=Math.PI/180;function setAll(t){const e="off"===t;autogear.setActive(e),autospoilers.setActive(e),autotrim.setActive(e),autoflaps.setActive(e),autolights.setActive(e),autobrakes.setActive(e),autospeed.setActive(e);document.getElementById("all").className=e?"active":"off"}function dependencyCheck(t){"autoland"===t&&autoland.isActive()&&domInterface.read("approach")?domInterface.write("approach",!1):"flypattern"===t&&flypattern.isActive()?(autoland.setActive(!1),flyto.setActive(!1)):"flyto"===t&&flyto.isActive()&&(flypattern.setActive(!1),autoland.setActive(!1))}const server=window.electron;server.on("ready",(([t])=>{document.getElementById("address").value=t,setHidden(!1)})),server.on("log",(([t])=>{log(t)}));const readbacks=new Map;async function readAsync(...t){let e=[];return t.forEach((t=>{e.push(new Promise((e=>{let a=0,o="";for(;o=t+a.toString(),readbacks.has(o);)a++;readbacks.set(o,e),server.send("read",t,o)})))})),Promise.all(e)}async function readLog(...t){await readAsync(...t).then((t=>{console.log(t.join(", "))}))}function write(t,e){server.send("write",t,e)}function bridge(){let t=document.getElementById("address").value;const e=t.split(".");""!==t&&(e.length<2&&(t="1."+t),e.length<3&&(t="168."+t),e.length<4&&(t="192."+t)),server.send("bridge",t)}function closeBridge(){reset(),server.send("break")}function setHidden(t){for(let e=1,a=panels.length;e<a;e++){panels[e].hidden=t}}function reset(){setHidden(!0),autofunctions.forEach((t=>{t.setActive(!1)})),storage.load(ProfileStorage.defaultName)}function log(t){statLog.innerText=t,console.log(t)}server.on("readback",(([t,e])=>{readbacks.get(t)(e),readbacks.delete(t)}));const domInterface=new DOMInterface,statLog=document.getElementById("status"),panels=document.getElementsByClassName("panel"),storage=new ProfileStorage(document.getElementById("profile-select")),autotrim=new AutoFunction("trim",1e3,["onground","pitch","trim"],[],[],((t,e)=>{const[a,o,n]=t;if(a)return void(0!==n&&write("trim",0));let i=10;if(Math.abs(o)<10?i=1:Math.abs(o)<50&&(i=5),Math.abs(o)>=2){let t=n+i*Math.sign(o);t=Math.round(t/i)*i,write("trim",t)}})),autolights=new AutoFunction("lights",2e3,["altitudeAGL","onground","onrunway","gear"],[],[],((t,e)=>{const[a,o,n,i]=t;write("master",!0),write("beaconlights",!0),write("navlights",!0),o?(write("strobelights",n),write("landinglights",n)):(write("strobelights",!0),write("landinglights",!!(a<1e3&&i)))})),autogear=new AutoFunction("gear",1e3,["gear","altitudeAGL","verticalspeed"],[],[],((t,e)=>{const[a,o,n]=t;let i=a;o<100||n<=-500&&o<1200?i=!0:(n>=500||o>=2e3)&&(i=!1),i!==a&&readAsync("commands/LandingGear")})),autobrakes=new AutoFunction("autobrakes",1e3,["leftbrake","rightbrake","autobrakes","onground","onrunway","groundspeed"],[],[],((t,e)=>{const[a,o,n,i,s,r]=t;let l=n;i&&!s?l=0:i?s&&(l=3):l=2,i&&r>30&&(a>.3||o>.3)&&(l=0),l!==n&&write("autobrakes",l)})),autoflaps=new AutoFunction("flaps",1e3,["flaps","airspeed","altitudeAGL","verticalspeed","flapcount","onground","onrunway"],["flaplow","flaphigh","flapto"],[],((t,e)=>{const[a,o,n,i,s,r,l]=t,[c,u,d]=e;if(d<0||d>s-1||u<c)return void autoflaps.error();let f=a;if(r)f=l?d:0;else if(n>=250){const t=s-1,e=(u-c)/t;f=Math.round((u-o)/e),f=Math.max(f,0),f=Math.min(f,t)}(i>=500&&f>a||i<=-500&&f<a)&&(f=a),f!==a&&write("flaps",f)})),autospoilers=new AutoFunction("spoilers",1e3,["spoilers","airspeed","spd","altitude","altitudeAGL","onrunway","onground"],[],[],((t,e)=>{const[a,o,n,i,s,r,l]=t;let c=0;r||!l&&s<1e3?c=2:!l&&(o-n>=20||n>255&&i<1e4)&&i<28e3&&(c=1),c!==a&&write("spoilers",c)})),autospeed=new AutoFunction("autospeed",1e3,["onground","verticalspeed","altitudeAGL","altitude","latitude","longitude","spd"],["latref","longref","climbspd","climbalt","spdref","cruisespd"],[],((t,e)=>{const[a,o,n,i,s,r,l]=t,[c,u,d,f,h,g]=e,m=domInterface.read("altref")[0];if(a)return void autospeed.arm();const p=null===m?n:i-m;let v=l;if(autoland.isActive()){let t=10*(calcLLdistance({lat:s,long:r},{lat:c,long:u})-2.5)+h;t=Math.min(t,l),t=10*Math.round(t/10),t=Math.max(t,h),v=t}else flypattern.isActive()||i<=f?v=d:i<1e4||i<12e3&&o<=-500?v=250:p>=1e4&&(v=g);v=Math.min(v,g),v!==l&&write("spd",v)})),levelchange=new AutoFunction("levelchange",1e3,["airspeed","altitude","alt"],["flcinput","flcmode"],[],((t,e)=>{const[a,o,n]=t,[i,s]=e;let r=i;const l=n-o;Math.abs(l)<100?levelchange.setActive(!1):("v"===s&&(r=NMtoFT*Math.tan(r*toRad)),"f"!==s&&(r*=a/60),r*=Math.sign(l),write("vs",r))})),markposition=new AutoFunction("markposition",-1,["latitude","longitude","altitude","heading"],[],[],((t,e)=>{const[a,o,n,i]=t;domInterface.write("latref",a),domInterface.write("longref",o),domInterface.write("hdgref",Math.round(i)),domInterface.write("altref",Math.round(n))})),setrunway=new AutoFunction("setrunway",-1,["route","coordinates"],[],[],((t,e)=>{const[a,o]=t,n=a.split(",");let i=-1;for(let t=0,e=n.length;t<e;t++)if(0===n[t].search(/RW\d\d.*/)){i=t;break}if(-1===i)return void setrunway.error();const s=n[i][2]+n[i][3]+"0",r=o.split(" ")[i].split(","),l=parseFloat(r[0]),c=parseFloat(r[1]),u=parseInt(s);domInterface.write("latref",l),domInterface.write("longref",c),domInterface.write("hdgref",u),domInterface.write("altref",null)})),rejecttakeoff=new AutoFunction("reject",-1,["onrunway"],[],[],((t,e)=>{const[a]=t;if(!a)return rejecttakeoff.error(),void console.log("Not on a runway");autotakeoff.isActive()&&autotakeoff.error(),write("autopilot",!1),write("throttle",-100)})),takeoffconfig=new AutoFunction("takeoffconfig",-1,["onground","heading","altitude"],["climbalt","climbtype","flcinputref","flcmoderef"],[],((t,e)=>{const[a,o,n]=t,[i,s,r,l]=e;if(!a)return takeoffconfig.error(),void console.log("Not on the ground");let c=i;if("agl"===s){c+=100*Math.round(n/100)}domInterface.write("flcinput",r),domInterface.write("flcmode",l),write("alt",c),write("hdg",o),write("vs",0),write("parkingbrake",!1)})),autotakeoff=new AutoFunction("autotakeoff",500,["onrunway","n1","airspeed"],["rotate","climbspd","climbthrottle","takeoffspool","takeofflnav","takeoffvnav"],[takeoffconfig,rejecttakeoff],((t,e)=>{const[a,o,n]=t,[i,s,r,l,c,u]=e,d=2*r-100;let f=autotakeoff.stage;if(0===f){if(!a)return void autotakeoff.error("Not on a Runway");autotakeoff.status="Inital Setup",takeoffconfig.setActive(!0),levelchange.setActive(!1),write("spd",s),write("autopilot",!0),write("alton",!0),write("vson",!1),write("hdgon",!0);write("throttle",l?-20:d),f++}else 1===f?(write("vson",!0),l?null===o||o>=40?(write("throttle",d),f++):autotakeoff.status="Spolling Engines":f++):2===f?(autotakeoff.status="Takeoff Roll",n>=i&&(levelchange.setActive(!0),f++)):3===f?(autotakeoff.status="Rotate",s-n<10&&(autotakeoff.status="Climbout",c&&write("navon",!0),write("spdon",!0),f++)):(autotakeoff.status="Takeoff Complete",autotakeoff.setActive(!1));autotakeoff.stage=f})),flyto=new AutoFunction("flyto",1e3,["latitude","longitude","variation","groundspeed","wind","winddir"],["flytolat","flytolong","flytohdg"],[],((t,e)=>{const[a,o,n,i,s,r]=t,[l,c,u]=e;function d(t){return t=(t%360+360)%360}const f=calcLLdistance({lat:a,long:o},{lat:l,long:c});if(f<1)return flyto.status="Arrived",void flyto.setActive(!1);const h=d(u),g=60*(l-a),m=60*(c-o)*Math.cos(.5*(a+l)*toRad),p=d(Math.atan2(m,g)*toDeg-n);let v=h-p;v>180?v-=360:v<-180&&(v+=360);const w=f*Math.sin(v*toRad),y=Math.abs(w);let A=100*y*(flyto.memory.manual??1);A=Math.min(A,30),y>2&&(A=45);const I=d(h-A*Math.sign(w)),M=d(r-n+180),k=(90-I)*toRad,b=(90-M)*toRad,D=2*i*Math.cos(k),L=2*i*Math.sin(k),E=s*Math.cos(b),T=s*Math.sin(b),F=d(Math.atan2(D-E,L-T)*toDeg);function x(t,e=1){return`${t<0?"L":"R"} ${Math.abs(t).toFixed(e)}`}flyto.status=`Distance: ${f.toFixed(1)}nm`,flyto.status+=`\nX-Track: ${x(w,2)}nm`,flyto.status+=`\n\nDirect: ${p.toFixed(0)}°`,flyto.status+=`\nOffset: ${x(v)}°`,flyto.status+=`\nCrab Angle: ${x(F-I)}°`,write("hdg",F)})),flypattern=new AutoFunction("flypattern",1e3,["latitude","longitude","variation","groundspeed"],["latref","longref","hdgref","updist","downwidth","finallength","leg","direction","approach"],[],((t,e)=>{const[a,o,n,i]=t,[s,r,l,c,u,d,f,h,g]=e,m=l+90*("r"===h?1:-1),p={location:{lat:s,long:r},hdg:l},v=p,w={location:calcLLfromHD(p.location,l,c+1.5,n),hdg:l},y={location:calcLLfromHD(w.location,m,u,n),hdg:m},A={location:calcLLfromHD(p.location,l+180,d,n),hdg:m+180},I={u:w,c:y,d:{location:calcLLfromHD(A.location,m,u,n),hdg:l+180},b:A,f:v}[f],M=calcLLdistance({lat:a,long:o},I.location);let k=f;if(M<i/60/(350/i*60*toRad)){const t=["u","c","d","b","f"];let e=t.indexOf(f);("f"!==f||"f"===f&&M<1)&&(e=(e+1)%5,k=t[e])}"f"===k&&g&&autoland.setActive(!0);const b=I.location.lat,D=I.location.long,L=(I.hdg%360+360)%360;domInterface.write("leg",k),domInterface.write("flytolat",b),domInterface.write("flytolong",D),domInterface.write("flytohdg",L),flyto.setActive(!0)})),goaround=new AutoFunction("goaround",-1,["onground"],["climbalt","climbspd","climbtype","altref","flcinputref","flcmoderef"],[],((t,e)=>{const[a]=t,[o,n,i,s,r,l]=e;if(a)return goaround.error(),void(autoland.status="Cannot Go-Around on the ground");autoland.error("Go-Around"),domInterface.write("leg","u"),domInterface.write("flcinput",r),domInterface.write("flcmode",l);let c=o;if("agl"===i){c+=100*Math.round(s/100)}write("spd",n),write("alt",c),write("spdon",!0),write("alton",!0),write("hdgon",!0),levelchange.setActive(!0)})),autoland=new AutoFunction("autoland",500,["latitude","longitude","altitude","groundspeed","onrunway"],["latref","longref","altref","hdgref","vparef","flare","touchdown","option","flcinputref","flcmoderef"],[flypattern,goaround],((t,e)=>{const[a,o,n,i,s]=t,[r,l,c,u,d,f,h,g,m,p]=e,v=n-c;if(0===autoland.stage&&(domInterface.write("flcmode","v"),domInterface.write("leg","f"),autoland.stage++),1===autoland.stage&&v<=f)return autoland.stage++,levelchange.setActive(!1),domInterface.write("flcinput",m),void domInterface.write("flcmode",p);if(2===autoland.stage){if(write("vs",-200),"p"!==g&&(autoland.status="Flare",write("spdon",!1),write("throttle",-100)),"p"===g)autoland.status="Flying Low-Pass",autoland.setActive(!1),setTimeout((()=>{goaround.setActive(!0)}),1e4);else if("l"===g&&s)autoland.status="Landing Complete",autoland.setActive(!1),flypattern.setActive(!1),flyto.setActive(!1),write("autopilot",!1);else if("t"===g&&s)autoland.status="Preparing for Takeoff",autoland.setActive(!1),setTimeout((()=>{autoland.status="Touch and Go Complete",autotakeoff.setActive(!0)}),5e3);else if("s"===g&&s){if(autoland.status="Stopping for Stop and Go",i>1)return;autoland.status="Stop and Go Complete",autoland.setActive(!1),autotakeoff.setActive(!0)}return}const w=calcLLdistance({lat:a,long:o},calcLLfromHD({lat:r,long:l},u,h/NMtoFT)),y=Math.atan2(v/NMtoFT,w)*toDeg,A=d-y,I=w*Math.sin(A*toRad);let M=d-100*I*(autoland.memory.manual??1);function k(t,e=1){return`${t>0?"B":"U"} ${Math.abs(t).toFixed(e)}`}M=Math.round(100*M)/100,autoland.status=`\n\nDistance: ${w.toFixed(2)}nm`,autoland.status+=`\nVX-Track: ${k(I*NMtoFT)}ft`,autoland.status+=`\n\nVPA: ${y.toFixed(2)}°`,autoland.status+=`\nOffset: ${k(A,2)}°`,M=Math.min(M,d+2),M=Math.max(M,0),domInterface.write("flcinput",M),write("alt",-1e3),levelchange.setActive(!0),flypattern.setActive(!0),autogear.isActive()&&autogear.setActive("p"!==g)})),autofunctions=[autobrakes,autoflaps,autogear,autoland,autolights,autospeed,autospoilers,autotakeoff,autotrim,flypattern,flyto,goaround,levelchange,markposition,rejecttakeoff,setrunway,takeoffconfig];